thread = {}
thread.list = {}
thread.getID = function(name)
  for i = 1, #thread.list do
    if thread.list[i].name == name then
      return thread.listt[i].id
  end
  return nil, "doesn't exist"
end
thread.create = function(name, func)
  local id = coroutine.create(func)
  newthread = {
  name = name,
  id = id,
  state = coroutine.status(id),
  running = false,
  }
  table.insert(thread.list, newthread)
  if not thread.list[#thread.list] then
    error("could not insert into table")
  end
end
thread.start = function(...)
  local tArgs = {...}
  local args = {}
  if #tArgs < 1 then
    error("no arguments passed")
  end
  local id = thread.getID(name)
  if not id then
     error("thread doesn't exist")
  end
  for i=1, #thread.list do
    if thread.list[i].id == id then
      item = i
    end
  end
  if #tArgs > 1 then
    for i=2, #tArgs do
      table.insert(args, tArgs[i])
      result = coroutine.resume(id, unpack(args))
      if result then thread.list[item].running = true else error("failed Starting coroutine") end
      return result
    end
  end
  return coroutine.resume(id)
end
thread.running = function()
  local id = coroutine.running()
  for i=1, #thread.list do
    if thread.list[i]["id"] == id then
      item = i
    end
  end
  if not thread.list[item] then error("coroutine doesn't exist") end
  return thread.list[item]["running"]
end
thread.kill = function(name)
  for i=1, #thread.list do
    if thread.list[i]["name"] == name and thread.list[i]["running"] == false then
      thread.list[i]["running"] = false
      return true
    end
  end
end
thread.refresh = function()
   for i=1, #thread.list do
      local id = thread.list[i]["id"]
      thread.list[i]["state"] = coroutine.status(id)
   end
end
thread.cleanUp = function()
  thread.refresh()
  for i=1, #threads.list do
    if not threads.list[i]["running"] or not thread.list[i]["state"] then
       table.remove(threads.list, i)
    end
  end
end
